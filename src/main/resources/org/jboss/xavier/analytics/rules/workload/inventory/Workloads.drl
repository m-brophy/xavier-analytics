package org.jboss.xavier.analytics.rules.workload.inventory;

import org.jboss.xavier.analytics.pojo.input.workload.inventory.VMWorkloadInventoryModel
import org.jboss.xavier.analytics.pojo.output.workload.inventory.WorkloadInventoryReportModel

dialect "java"
agenda-group "Workloads"
lock-on-active true
auto-focus false

function boolean servicesContainsString(VMWorkloadInventoryModel vmWorkloadInventoryModel, String searchTerm)
{
    return vmWorkloadInventoryModel.getSystemServicesNames().stream().anyMatch(systemServiceName -> systemServiceName.toLowerCase().contains(searchTerm.toLowerCase()));
}

function boolean servicesStartsWithString(VMWorkloadInventoryModel vmWorkloadInventoryModel, String searchTerm)
{
    return vmWorkloadInventoryModel.getSystemServicesNames().stream().anyMatch(systemServiceName -> systemServiceName.toLowerCase().startsWith(searchTerm.toLowerCase()));
}

function boolean filesValuesContainsString(VMWorkloadInventoryModel vmWorkloadInventoryModel, String searchTerm)
{
    return vmWorkloadInventoryModel.getFiles().keySet().stream().anyMatch(value -> value.toLowerCase().contains(searchTerm.toLowerCase()));
}

function boolean filesContentsContainsString(VMWorkloadInventoryModel vmWorkloadInventoryModel, String searchTerm)
{
    return vmWorkloadInventoryModel.getFiles().values().stream().anyMatch(value -> value != null && value.toLowerCase().contains(searchTerm.toLowerCase()));
}

function boolean fileNameAndContentsContainSpecifiedStrings(VMWorkloadInventoryModel vmWorkloadInventoryModel, String nameSearchTerm, String contentsSearchTerm)
{
    return vmWorkloadInventoryModel.getFiles().entrySet().stream().anyMatch(entry ->
        entry.getKey().toLowerCase().contains(nameSearchTerm.toLowerCase()) &&
        entry.getValue() != null &&
        entry.getValue().toLowerCase().contains(contentsSearchTerm.toLowerCase())
    );
}

rule "Workloads_Tomcat"
    when
        vmWorkloadInventoryModel : VMWorkloadInventoryModel(
            systemServicesNames != null,
            systemServicesNames.size() > 0,
            servicesContainsString(this,"tomcat")
        )
        workloadInventoryReport : WorkloadInventoryReportModel()
    then
        modify(workloadInventoryReport)
        {
            addWorkload("Tomcat")
        }
end

rule "Workloads_EAP"
    when
        vmWorkloadInventoryModel : VMWorkloadInventoryModel(
            systemServicesNames != null,
            systemServicesNames.size() > 0,
            servicesContainsString(this,"jboss-as-standalone.sh") ||
            servicesContainsString(this,"jboss-as-domain.sh") ||
            servicesContainsString(this,"jboss-eap-rhel.sh") ||
            servicesContainsString(this,"eap7-domain") ||
            servicesContainsString(this,"eap7-standalone") ||
            servicesContainsString(this,"jboss") ||
            servicesContainsString(this,"jboss-host-controller")
        )
        workloadInventoryReport : WorkloadInventoryReportModel()
    then
        modify(workloadInventoryReport)
        {
            addWorkload("Red Hat JBoss EAP")
        }
end

rule "Workloads_Websphere"
    when
        vmWorkloadInventoryModel : VMWorkloadInventoryModel(
            systemServicesNames != null,
            systemServicesNames.size() > 0,
            servicesContainsString(this,"Dmgr_was.init") ||
            servicesContainsString(this,"Node_was.init") ||
            servicesContainsString(this,"nodeagent_was.init")||
            servicesStartsWithString(this,"was")||
            servicesContainsString(this,"websphere")
        )
        workloadInventoryReport : WorkloadInventoryReportModel()
    then
        modify(workloadInventoryReport)
        {
            addWorkload("IBM Websphere App Server")
        }
end

rule "Workloads_Weblogic"
    when
        vmWorkloadInventoryModel : VMWorkloadInventoryModel(
            systemServicesNames != null,
            systemServicesNames.size() > 0,
            servicesContainsString(this,"wls_nodemanager") ||
            servicesContainsString(this,"wls_adminmanager") ||
            servicesContainsString(this,"weblogic_nodemanager") ||
            servicesContainsString(this,"weblogic_adminmanager")
        )
        workloadInventoryReport : WorkloadInventoryReportModel()
    then
        modify(workloadInventoryReport)
        {
            addWorkload("Oracle Weblogic")
        }
end

rule "Workloads_Oracle_DB"
    when
        vmWorkloadInventoryModel : VMWorkloadInventoryModel(
            systemServicesNames != null,
            systemServicesNames.size() > 0,
            servicesContainsString(this,"dbora")
        )
        workloadInventoryReport : WorkloadInventoryReportModel()
    then
        modify(workloadInventoryReport)
        {
            addWorkload("Oracle Database")
        }
end

rule "Workloads_SAP_HANA"
    when
        vmWorkloadInventoryModel : VMWorkloadInventoryModel(
            systemServicesNames != null,
            systemServicesNames.size() > 0,
            servicesContainsString(this,"sapinit")
        )
        workloadInventoryReport : WorkloadInventoryReportModel()
    then
        modify(workloadInventoryReport)
        {
            addWorkload("SAP HANA")
        }
end

rule "Workloads_Clickhouse_Server"
       when
           vmWorkloadInventoryModel : VMWorkloadInventoryModel(
               systemServicesNames != null,
               systemServicesNames.size() > 0,
               servicesContainsString(this,"clickhouse-server")
           )
           workloadInventoryReport : WorkloadInventoryReportModel()
       then
           modify(workloadInventoryReport)
           {
               addWorkload("Clickhouse Server")
           }
end

rule "Workloads_Microsoft_SQL_Server_On_Linux"
       when
           vmWorkloadInventoryModel : VMWorkloadInventoryModel(
               systemServicesNames != null,
               systemServicesNames.size() > 0,
               servicesContainsString(this,"mssql-server")
           )
           workloadInventoryReport : WorkloadInventoryReportModel()
       then
           modify(workloadInventoryReport)
           {
               addWorkload("Microsoft SQL Server")
           }
end


rule "Workloads_Microsoft_SQL_Server_On_Windows"
       when
           vmWorkloadInventoryModel : VMWorkloadInventoryModel(
               files != null,
               files.size() > 0,
               filesValuesContainsString(this, "C:\\Program Files\\Microsoft SQL Server") ||
               filesValuesContainsString(this, "C:/Program Files/Microsoft SQL Server")
           )
           workloadInventoryReport : WorkloadInventoryReportModel()
       then
           modify(workloadInventoryReport)
           {
               addWorkload("Microsoft SQL Server")
           }
end

rule "Workloads_Artifactory"
       when
           vmWorkloadInventoryModel : VMWorkloadInventoryModel(
               systemServicesNames != null,
               systemServicesNames.size() > 0,
               servicesContainsString(this,"artifactory")
           )
           workloadInventoryReport : WorkloadInventoryReportModel()
       then
           modify(workloadInventoryReport)
           {
               addWorkload("Artifactory")
           }
end

rule "Workloads_F5"
       when
           vmWorkloadInventoryModel : VMWorkloadInventoryModel(
               systemServicesNames != null,
               systemServicesNames.size() > 0,
               servicesContainsString(this,"f5functions"),
               servicesContainsString(this,"f5dirs"),
               servicesContainsString(this,"f5-swap-eth")
           )
           workloadInventoryReport : WorkloadInventoryReportModel()
       then
           modify(workloadInventoryReport)
           {
               addWorkload("F5")
           }
end

rule "Workloads_Citrix_Unidesk"
       when
           vmWorkloadInventoryModel : VMWorkloadInventoryModel(
                      systemServicesNames != null,
                      systemServicesNames.size() > 0,
                      servicesContainsString(this,"unidesk-xenserver-connector") ||
                      servicesContainsString(this,"unidesk-vsphere-connector") ||
                      servicesContainsString(this,"unidesk-pvs-connector") ||
                      servicesContainsString(this,"unidesk-nutanix-connector") ||
                      servicesContainsString(this,"unidesk-hyperv-connector") ||
                      servicesContainsString(this,"unidesk-azure-connector")
           )
           workloadInventoryReport : WorkloadInventoryReportModel()
       then
           modify(workloadInventoryReport)
           {
                addWorkload("Citrix Unidesk")
           }
end

rule "Workloads_Cisco_CallManager"
      when
            vmWorkloadInventoryModel : VMWorkloadInventoryModel(
                     systemServicesNames != null,
                     systemServicesNames.size() > 0,
                     servicesContainsString(this,"cisco_history_log"),
                     files != null,
                     files.size() > 0,
                     fileNameAndContentsContainSpecifiedStrings(this, "/etc/group", "ccmservice")
            )
            workloadInventoryReport : WorkloadInventoryReportModel()
      then
            modify(workloadInventoryReport)
            {
                addWorkload("Cisco CallManager")
            }
end



rule "SsaEnabled_System_Services_Present"
    when
        vmWorkloadInventoryModel : VMWorkloadInventoryModel(
            systemServicesNames != null,
            systemServicesNames.size() > 0
        )
        workloadInventoryReport : WorkloadInventoryReportModel()

    then
        modify(workloadInventoryReport)
        {

            setSsaEnabled(true)
        }

end

rule "SsaDisabled_System_Services_Not_Present"
    when
        vmWorkloadInventoryModel : VMWorkloadInventoryModel(
            systemServicesNames == null || systemServicesNames.size() == 0
        )
        workloadInventoryReport : WorkloadInventoryReportModel()

    then
        modify(workloadInventoryReport)
        {
            setSsaEnabled(false)
        }

end
